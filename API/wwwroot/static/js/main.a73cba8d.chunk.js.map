{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/profileStore.ts","app/stores/store.ts","app/stores/CommonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/users/loginForm.tsx","features/errors/ValidationErrorPage.tsx","features/users/RegisterForm.tsx","features/home/homePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/CategoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","features/activities/Details/ActivityDetailedHeader.tsx","features/activities/Details/ActivityDetailedInfo.tsx","features/activities/Details/ActivityDetailedChat.tsx","features/activities/Details/ActivityDetailedSidebar.tsx","features/activities/Details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFoundPage.tsx","features/errors/ServerErrorPage.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","messagesError","key","flat","setServerError","Promise","reject","defaults","baseURL","process","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","Activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","city","venue","date","Profile","userName","displayName","image","ActivityStore","activityRegestry","Map","selectedActivity","loadingInitial","submiting","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadActivity","axiosParams","result","setActivity","setPagination","console","log","loadActivity","getActivity","runInAction","createActivity","userStore","attendee","newActivity","hostUsername","attendees","EditActivity","updatedActivity","deleteActivity","state","updateAttendance","isGoing","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","some","isHost","host","find","Date","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","setImage","setDisplayName","name","ProfileStore","loadingProfile","uploading","loading","followings","loadingFollowings","activeTab","loadingActivities","userActivities","setActiveTab","loadProfile","photo","photos","isMain","p","activityStore","followingCount","loadFollowings","loadUserActivities","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","storeContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","Link","position","Image","avatar","spaced","Dropdown","pointing","text","icon","onClick","MyTextInput","props","useField","field","meta","Form","Field","touched","label","Label","basic","color","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","Header","textAlign","placeholder","type","render","marginBottom","fluid","ValidationErrorPage","Message","List","map","err","i","validationSchema","yup","required","isValid","dirty","disabled","Segment","vertical","size","isLoggedIn","LoadingComponent","Dimmer","active","Loader","MyTextArea","rows","helpers","Select","clearable","options","onChange","e","d","setValue","onBlur","setTouched","CategoryOptions","MyDateInput","selected","useHistory","React","useState","useParams","nullable","useEffect","clearing","enableReinitialize","uuid","handleForm","showTimeSelect","timeCaption","dateFormat","placeholderText","floated","marginTop","float","Reveal","animated","Content","visible","width","hidden","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","horizontal","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Group","attached","secondary","groupedActivities","groupBy","sub","has","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","loadingNext","setLoadingNext","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFoundPage","Inline","ServerErrorPage","message","Modal","onClose","setEditMode","isCurrentUser","editMode","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menupostion","avater","verticalalign","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","homePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.a73cba8d.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { history } from \"../..\";\nimport { activity, ActivityFormValues } from \"../models/activity\";\nimport { PaginatedResult } from \"../models/pagination\";\nimport { Photo, Profile } from \"../models/profile\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"../stores/store\";\nimport { UserActivity } from \"../models/UserActivity\";\n\nconst sleep = (delay: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  })\n}\n\naxios.interceptors.request.use(config => {\n  const token = store.commonStore.token;\n  if (token) config.headers.Authorization = `Bearer ${token}`\n  return config;\n})\naxios.interceptors.response.use(async response => {\n  if (process.env.NODE_ENV === 'development') await sleep(1000);\n  const pagination = response.headers['pagination'];\n  if (pagination) {\n    response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n\n    return response as AxiosResponse<PaginatedResult<any>>\n  }\n  return response;\n}, (error: AxiosError) => {\n  const { data, status, config } = error.response!;\n\n  switch (status) {\n    case 400:\n      if (typeof data === 'string') {\n        toast.error(data);\n      }\n      if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n        toast.error(\"Not allowed id !\");\n        history.push('/not-found');\n      }\n      if (data.errors) {\n        if (config.method !== 'get') {\n          const messagesError = [];\n\n          for (const key in data.errors) {\n            if (data.errors[key]) {\n              messagesError.push(data.errors[key]);\n            }\n          }\n          toast.error(\"Validation errors!\");\n          throw messagesError.flat();\n        }\n      }\n      break;\n    case 401:\n      toast.error(\"Unauthorised !\");\n      break;\n    case 404:\n      toast.error(\"Not Found !\");\n      history.push('/error/not-found');\n      break;\n    case 500:\n      toast.error(\"Server Error !\");\n      store.commonStore.setServerError(data);\n      history.push('/server-error')\n      break;\n  }\n  return Promise.reject(error);\n})//after the comma function will excute if there is any error\n\n// axios.defaults.baseURL = \"http://localhost:5000/api\";\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\n\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n  post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n  put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n  del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n};\n\nconst Activities = {\n  list: (params: URLSearchParams) => axios.get<PaginatedResult<activity[]>>(\"/activites\", {params})\n    .then(responseBody),\n  details: (id: string) => requests.get<activity>(`/activites/${id}`),\n  create: (Activity: ActivityFormValues) => requests.post<void>(`/activites`, Activity),\n  update: (Activity: ActivityFormValues) => requests.put<void>(`/activites/${Activity.id}`, Activity),\n  delete: (id: string) => requests.del<void>(`/activites/${id}`),\n  attend: (id: string) => requests.post<void>(`/activites/${id}/attend`, {}),\n};\n\nconst Account = {\n  current: () => requests.get<User>('/account'),\n  login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n  register: (user: UserFormValues) => requests.post<User>('/account/register', user),\n}\n\nconst Profiles = {\n  get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n  uploadPhoto: (file: Blob) => {\n    let formData = new FormData();\n\n    formData.append('File', file);\n    return axios.post<Photo>('photos', formData, {\n      headers: {'Content-type': 'multipart/form-data'}\n    })\n  },\n  setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n  deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n  updateProfile: (profile: Partial<Profile>) => requests.put('/profiles', profile),\n  updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n  listFollowings: (username: string, predicate: string) =>\n    requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n  listActivities: (username: string, predicate: string) =>\n    requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent = {\n  Activities,\n  Account,\n  Profiles\n}\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\nexport class activity implements activity {\r\n    /**\r\n     *\r\n     */\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    city: string = '';\r\n    venue: string = '';\r\n    date: Date | null = null;\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if(activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n            this.date = activity.date;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    userName: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.userName = user.userName;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegestry = new Map<string, activity>();\r\n    selectedActivity: activity | undefined = undefined;\r\n    loadingInitial = false;\r\n    submiting = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        /* makeObservable(this, {\r\n            title: observable,\r\n            setTitle: action\r\n        }) */\r\n        //or\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegestry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n\r\n        return params;\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.setLoadActivity(true);\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n\r\n            result.data.forEach(Activity => {\r\n                this.setActivity(Activity);\r\n            });\r\n            this.setPagination(result.pagination)\r\n            this.setLoadActivity(false);\r\n        } catch (error) {\r\n            console.log('activityStore.ts error in async method ' + error)\r\n            this.setLoadActivity(false);\r\n        };\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }\r\n        else {\r\n            this.setLoadActivity(true)\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => this.selectedActivity = activity);\r\n                this.setLoadActivity(false);\r\n                return activity;\r\n            } catch (error) { console.log(error); this.setLoadActivity(false) }\r\n        }\r\n    }\r\n\r\n    createActivity = async (Activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n            await agent.Activities.create(Activity);\r\n            const newActivity = new activity(Activity);\r\n            newActivity.hostUsername = user!.userName;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) { console.log(error) }\r\n    }\r\n\r\n    EditActivity = async (Activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(Activity);\r\n            runInAction(() => {\r\n                if (Activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(Activity.id)!, ...Activity }\r\n                    this.activityRegestry.set(Activity.id, updatedActivity);\r\n                    this.selectedActivity = updatedActivity;\r\n                }\r\n            })\r\n        } catch (error) { console.log(error) }\r\n    }\r\n\r\n    deleteActivity = async (Activity: activity) => {\r\n        runInAction(() => this.submiting = true);\r\n        try {\r\n            await agent.Activities.delete(Activity.id).then(() => {\r\n                runInAction(() => {\r\n                    this.activityRegestry.delete(Activity.id);\r\n                    runInAction(() => this.submiting = false);\r\n                    this.selectedActivity = undefined;\r\n                })\r\n            })\r\n        } catch (error) { console.log(error); runInAction(() => this.submiting = false); }\r\n    }\r\n\r\n    private setActivity(Activity: activity) {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            Activity.isGoing = Activity.attendees!.some(\r\n                a => a.userName === user.userName\r\n            );\r\n            Activity.isHost = Activity.hostUsername === user.userName;\r\n            Activity.host = Activity.attendees!.find(\r\n                a => a.userName === Activity.hostUsername\r\n            );\r\n        }\r\n\r\n        Activity.date = new Date(Activity.date!);\r\n        this.activityRegestry.set(Activity.id, Activity);\r\n    }\r\n\r\n    private getActivity(id: string) {\r\n        return this.activityRegestry.get(id);\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegestry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                //activities => its the array of objects that will contain the result of type {} as {[key: string]: activity[]} key and value(date: array of activities)\r\n                //activity => will itreator on activities in the array\r\n                //console.log(activities);\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: activity[] })\r\n        );\r\n    }\r\n\r\n    private setLoadActivity = (state: boolean) => {\r\n        runInAction(() => this.loadingInitial = state)\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        runInAction(() => this.submiting = true);\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(\r\n                        a => a.userName !== user?.userName\r\n                    );\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegestry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => runInAction(() => this.submiting = false))\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        runInAction(() => this.submiting = true);\r\n        try{\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity!.isCancelled;\r\n                this.activityRegestry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        }catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.submiting = false)\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegestry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.userName === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push(\"/activities\");\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user)\r\n        }catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push(\"/activities\");\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile } from \"../models/profile\";\r\nimport { UserActivity } from \"../models/UserActivity\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    loadingActivities = false;\r\n    userActivities: UserActivity[] = [];\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if(store.userStore.user && this.profile) {\r\n            return store.userStore.user.userName === this.profile.userName;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => (this.loadingProfile = false));\r\n        }\r\n    };\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        }catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false)\r\n        }\r\n    }\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        }catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        }catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n\r\n            runInAction(() => {\r\n                if(this.profile && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName!);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        }catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.userName !== store.userStore.user?.userName && this.profile.userName === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n\r\n                if (this.profile && this.profile.userName === store.userStore.user?.userName) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n\r\n                this.followings.forEach(profile => {\r\n                    if (profile.userName === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n\r\n                this.loading = false;\r\n            })\r\n        }catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.userName, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        }catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            });\r\n        }catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingActivities = false);\r\n        }\r\n    }\r\n}\r\n","import ActivityStore from \"./activityStore\";\nimport CommonStore from \"./CommonStore\";\nimport { createContext, useContext } from \"react\";\nimport UserStore from \"./userStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport CommentStore from \"./commentStore\";\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore(),\n};\nexport const storeContext = createContext(store);\n\nexport function useStore() {\n    return useContext(storeContext);\n}\n","import { ServerError } from \"../models/serverError\";\nimport { makeAutoObservable, reaction } from 'mobx'\n\nexport default class CommonError{\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token){\n                    window.localStorage.setItem('jwt', token)\n                }else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            \r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments;\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping the connection: ', error));\r\n    }\r\n\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        }catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { Button, Container, Menu, Image, Dropdown } from \"semantic-ui-react\";\nimport { useStore } from \"../stores/store\";\nexport default observer(function NavBar() {\n  const { userStore: { user, logout } } = useStore();\n  return (\n    <Menu inverted fixed=\"top\">\n      <Container>\n        <Menu.Item as={NavLink} to=\"/\" exact header>\n          <img\n            src=\"/assets/logo.png\"\n            alt=\"logo\"\n            style={{ marginRight: \"10px\" }}\n          />\n          Reactivities\n        </Menu.Item>\n        <Menu.Item as={NavLink} to=\"/activities\" name=\"activities\" />\n        <Menu.Item as={NavLink} to=\"/errors\" name=\"errors\" />\n        <Menu.Item>\n          <Button\n            positive\n            content=\"Create Activity\"\n            as={Link}\n            to=\"/createActivity\"\n          />\n        </Menu.Item>\n        <Menu.Item position=\"right\">\n          <Image src={user?.image || 'assets/user.png'} avatar spaced='right' />\n          <Dropdown pointing='top left' text={user?.displayName} >\n            <Dropdown.Menu>\n              <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text='My Profile' icon='user' />\n              <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n            </Dropdown.Menu>\n          </Dropdown>\n        </Menu.Item>\n      </Container>\n    </Menu>\n  );\n})\n","import { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: \"\", password: \"\", error: null }}\r\n            onSubmit={(values, { setErrors }) =>\r\n                userStore\r\n                    .login(values)\r\n                    .catch((error) => setErrors({ error: \"Invalid email or password\" }))\r\n            }\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <Header as='h2' content='Login to Reactivities' color ='teal' textAlign=\"center\" />\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\r\n                    <ErrorMessage\r\n                        name=\"error\"\r\n                        render={() => (\r\n                            <Label\r\n                                basic\r\n                                color=\"red\"\r\n                                content={errors.error}\r\n                                style={{ marginBottom: 10 }}\r\n                            />\r\n                        )}\r\n                    />\r\n                    <Button\r\n                        loading={isSubmitting}\r\n                        positive\r\n                        content=\"Login\"\r\n                        type=\"submit\"\r\n                        fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n});\r\n","import React from 'react'\nimport { Message } from 'semantic-ui-react'\ninterface Props {\n    errors: any;\n}\nexport default function ValidationErrorPage({ errors }: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i} >{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as yup from 'yup'\r\nimport ValidationErrorPage from \"../errors/ValidationErrorPage\";\r\n\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: '', userName: '', email: \"\", password: \"\", error: null }}\r\n            onSubmit={(values, { setErrors }) =>\r\n                userStore\r\n                    .register(values)\r\n                    .catch((error) => setErrors({ error }))\r\n            }\r\n            validationSchema={yup.object({\r\n                displayName: yup.string().required(),\r\n                userName: yup.string().required(),\r\n                email: yup.string().email().required().email(),\r\n                password: yup.string().required()\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign=\"center\" />\r\n                    <MyTextInput name=\"displayName\" placeholder=\"Display Name\" />\r\n                    <MyTextInput name=\"userName\" placeholder=\"User Name\" />\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\r\n                    <ErrorMessage\r\n                        name=\"error\"\r\n                        render={() => (\r\n                            <ValidationErrorPage errors={errors.error} />\r\n                        )}\r\n                    />\r\n                    <Button\r\n                        loading={isSubmitting}\r\n                        disabled={!isValid || !dirty || isSubmitting}\r\n                        positive\r\n                        content=\"Register\"\r\n                        type=\"submit\"\r\n                        fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n});\r\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, Container, Header, Segment, Image } from 'semantic-ui-react'\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/loginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage() {\n    const { userStore, modalStore } = useStore();\n    return (\n        <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\n            <Container text>\n                <Header as=\"h1\" inverted>\n                    <Image size=\"massive\" src=\"/assets/logo.png\" alt=\"logo\" style={{ marginBottom: 12 }} />\n                    Reactivities\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as=\"h2\" inverted content=\"Welcome To Reactivities\" />\n                        <Button as={Link} to=\"/activities\" size=\"huge\" inverted>\n                            Go To Activities!\n                        </Button>\n                    </>\n                ) : (\n                    <>\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size=\"huge\" inverted>\n                            Login!\n                        </Button>\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size=\"huge\" inverted>\n                            Register!\n                        </Button>\n                    </>\n                )}\n            </Container>\n        </Segment>\n    )\n})","import React from 'react'\nimport {Dimmer, Loader} from 'semantic-ui-react'\n\ninterface Props{\n    inverted?: boolean;\n    content: string\n}\n export default function LoadingComponent({inverted=true, content='Loading...'}: Props){\nreturn(\n    <Dimmer active={true} inverted={inverted}>\n        <Loader content={content} />\n    </Dimmer>\n)\n }","import { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} rows={props.rows} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">\r\n                    {meta.error}\r\n                </Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}\r\n","export const CategoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    { text: 'Culture', value: 'culture' },\r\n    { text: 'Film', value: 'film' },\r\n    { text: 'Food', value: 'food' },\r\n    { text: 'Music', value: 'music' },\r\n    { text: 'Travel', value: 'travel' },\r\n]","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, { ReactDatePickerProps } from \"react-datepicker\";\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n            {...field}\r\n            {...props}\r\n            selected={(field.value && new Date(field.value)) || null} \r\n            onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">\r\n                    {meta.error}\r\n                </Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Segment, Button, Header } from \"semantic-ui-react\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { CategoryOptions } from \"../../../app/common/options/CategoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\n\r\nexport default observer(function ActivityForm() {\r\n  const { activityStore } = useStore();\r\n  const {\r\n    loadActivity,\r\n    createActivity,\r\n    EditActivity,\r\n    loadingInitial,\r\n  } = activityStore;\r\n\r\n  const history = useHistory();\r\n\r\n  const [Activity, setActivity] = React.useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n  const { id } = useParams<{ id: string }>();\r\n\r\n  const validationSchema = yup.object({\r\n    title: yup.string().required(\"The activity title is required\"),\r\n    description: yup.string().required(\"The activity description is required\"),\r\n    category: yup.string().required(\"The activity category is required\"),\r\n    date: yup.string().required(\"The activity date is required\").nullable(),\r\n    venue: yup.string().required(\"The activity venue is required\"),\r\n    city: yup.string().required(\"The activity city is required\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (id) loadActivity(id).then((activity) => setActivity(new ActivityFormValues(activity)));\r\n  }, [loadActivity, id]);\r\n\r\n  function handleForm(Activity: ActivityFormValues) {\r\n    if (!Activity.id) {\r\n      const newActivity = {\r\n        ...Activity,\r\n        id: uuid(),\r\n      };\r\n      createActivity(newActivity).then(() =>\r\n        history.push(`/activities/${newActivity.id}`)\r\n      );\r\n    } else {\r\n      EditActivity(Activity).then(() =>\r\n        history.push(`/activities/${Activity.id}`)\r\n      );\r\n    }\r\n  }\r\n\r\n  /* const handleInputs = (\r\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const { name, value } = event.target;\r\n\r\n    setActivity({ ...Activity!, [name]: value });\r\n  }; */\r\n\r\n  if (loadingInitial && id)\r\n    return <LoadingComponent content=\"Loading information...\" />;\r\n  return (\r\n    <Segment clearing>\r\n      <Header content=\"Activity Details\" color=\"teal\" />\r\n      <Formik\r\n        validationSchema={validationSchema}\r\n        enableReinitialize\r\n        initialValues={Activity}\r\n        onSubmit={(values) => handleForm(values)}\r\n      >\r\n        {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n          <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n            <MyTextInput name=\"title\" placeholder=\"title\" />\r\n            <MyTextArea rows={3} placeholder=\"Description\" name=\"description\" />\r\n            <MySelectInput\r\n              options={CategoryOptions}\r\n              placeholder=\"Category\"\r\n              name=\"category\"\r\n            />\r\n            <MyDateInput\r\n              showTimeSelect\r\n              timeCaption=\"time\"\r\n              dateFormat=\"MMM d, yyyy h:mm aa\"\r\n              placeholderText=\"Date\"\r\n              name=\"date\"\r\n            />\r\n            <Header content=\"Location Details\" color=\"teal\" />\r\n            <MyTextInput placeholder=\"City\" name=\"city\" />\r\n            <MyTextInput placeholder=\"Venue\" name=\"venue\" />\r\n\r\n            <Button\r\n              disabled={!isValid || !dirty || isSubmitting}\r\n              loading={isSubmitting}\r\n              floated=\"right\"\r\n              positive\r\n              type=\"submit\"\r\n              content=\"submit\"\r\n              style={{ marginTop: \"5px\" }}\r\n            />\r\n            <Button\r\n              type=\"button\"\r\n              content=\"Back\"\r\n              style={{ float: \"right\", marginTop: \"5px\" }}\r\n              as={Link}\r\n              to={\"/activities\"}\r\n            />\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Segment>\r\n  );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.userName === profile.userName) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n\r\n    return (\r\n        <Reveal animated=\"move\">\r\n            <Reveal.Content visible style={{ width: \"100%\" }}>\r\n                <Button\r\n                    fluid\r\n                    color=\"teal\"\r\n                    content={profile.following ? \"Following\" : \"Not following\"}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: \"100%\" }}>\r\n                <Button\r\n                    fluid\r\n                    color={profile.following ? \"red\" : \"green\"}\r\n                    content={profile.following ? \"Unfollow\" : \"Follow\"}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.userName)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    );\r\n});\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard ({profile} : Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str\r\n        }\r\n    }\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.userName}`} >\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { List, Image, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({\r\n    attendees,\r\n}: Props) {\r\n    const styles = {\r\n        borderColor: \"orange\",\r\n        borderWidth: 3,\r\n    };\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map((attendee) => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.userName}\r\n                    trigger={\r\n                        <List.Item\r\n                            key={attendee.userName}\r\n                            as={Link}\r\n                            to={`/profiles/${attendee.userName}`}\r\n                        >\r\n                            <Image\r\n                                size=\"mini\"\r\n                                circular\r\n                                src={attendee.image || \"/assets/user.png\"}\r\n                                bordered\r\n                                style={attendee.following ? styles: null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    );\r\n});\r\n","import React from \"react\";\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { activity } from \"../../../app/models/activity\";\nimport { format } from \"date-fns\";\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\n\ninterface Props {\n    Activity: activity;\n}\n\nexport default function ActivityListItem({ Activity }: Props) {\n    return (\n        <Segment.Group>\n            <Segment>\n                {Activity.isCancelled && (\n                    <Label\n                        attached=\"top\"\n                        color=\"red\"\n                        content=\"Cancelled\"\n                        style={{ textAlign: \"center\" }}\n                    />\n                )}\n                <Item.Group>\n                    <Item>\n                        <Item.Image\n                            style={{ marginBottom: 3 }}\n                            size=\"tiny\"\n                            circular\n                            src={Activity.host?.image || \"/assets/user.png\"}\n                        />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${Activity.id}`}>\n                                {Activity.title}\n                            </Item.Header>\n                            <Item.Description>\n                                Hosted by{\" \"}\n                                <Link to={`/profiles/${Activity.hostUsername}`}>\n                                    {\" \"}\n                                    {Activity.host?.displayName}{\" \"}\n                                </Link>\n                            </Item.Description>\n                            {Activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color=\"orange\">\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {Activity.isGoing && !Activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color=\"green\">\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name=\"clock\" /> {format(Activity.date!, \"dd MMM yyyy h:mm aa\")}\n                    <Icon name=\"marker\" /> {Activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={Activity.attendees!} />\n            </Segment>\n            <Segment clearing>\n                <span>{Activity.description}</span>\n                <Button\n                    as={Link}\n                    to={`/activities/${Activity.id}`}\n                    color=\"teal\"\n                    content=\"View\"\n                    floated=\"right\"\n                />\n            </Segment>\n        </Segment.Group>\n    );\n}\n","import React, { Fragment } from \"react\";\nimport { Header } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport { observer } from \"mobx-react-lite\";\nimport ActivityListItem from \"./ActivityListItem\";\n\nexport default observer(function ActivityList() {\n  const { activityStore } = useStore();\n  const { groupedActivities } = activityStore;\n\n  return (\n    <>\n      {groupedActivities.map(([groupBy, activities]) => (\n        <Fragment key={groupBy}>\n          <Header sub color=\"teal\">\n            {groupBy}\n          </Header>\n          {activities.map(Activity => (\n            <ActivityListItem key={Activity.id} Activity={Activity} />\n          ))}\n        </Fragment>\n      ))}\n    </>\n  );\n});\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport Calendar from 'react-calendar'\nimport { Header, Menu } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store'\n\n\nexport default observer(function ActivityFilters() {\n    const { activityStore: { predicate, setPredicate } } = useStore();\n    \n    \n    return (\n        <>\n            <Menu vertical size=\"large\" style={{ width: '100%', marginTop: 26 }}>\n                <Header icon=\"filter\" attached color=\"teal\" content=\"Filters\" />\n                <Menu.Item\n                    content=\"All Activities\"\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item\n                    content=\"I'm Going\"\n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item\n                    content=\"I'm Hosting\"\n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                />\n            </Menu>\n            <Header />\n            <Calendar\n                onChange={(date: Date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\nimport { Grid, Loader } from \"semantic-ui-react\";\nimport ActivityList from \"./ActivityList\";\nimport { useStore } from \"../../../app/stores/store\";\nimport { observer } from \"mobx-react-lite\";\nimport ActivityFilters from \"./ActivityFilters\";\nimport { PagingParams } from \"../../../app/models/pagination\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\n\nexport default observer(function ActivityDashboard() {\n  const { activityStore } = useStore();\n  const { loadActivities, activityRegestry, setPagingParams, pagination } =\n    activityStore;\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  function handleGetNext() {\n    setLoadingNext(true);\n    setPagingParams(new PagingParams(pagination!.currentPage + 1));\n    loadActivities().then(() => setLoadingNext(false));\n  }\n\n  useEffect(() => {\n    if (activityRegestry.size <= 1) loadActivities();\n  }, [loadActivities, activityRegestry.size]);\n\n  /* if (activityStore.loadingInitial && !loadingNext)\n    return <LoadingComponent content={\"Loading activities...\"} />; */\n  return (\n    <Grid>\n      {/* the width of page = 16 */}\n      <Grid.Column width=\"10\">\n        {activityStore.loadingInitial && !loadingNext ? (\n          <>\n            <ActivityListItemPlaceholder />\n            <ActivityListItemPlaceholder />\n          </>\n        ) : (\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={\n              !loadingNext &&\n              !!pagination &&\n              pagination.currentPage < pagination.totalPages\n            }\n            initialLoad={false}\n          >\n            <ActivityList />\n          </InfiniteScroll>\n        )}\n      </Grid.Column>\n      <Grid.Column width=\"6\">\n        <ActivityFilters />\n      </Grid.Column>\n      <Grid.Column width={10}>\n        <Loader active={loadingNext} />\n      </Grid.Column>\n    </Grid>\n  );\n});\n","import { format } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Header, Item, Segment, Image, Label } from \"semantic-ui-react\";\nimport { activity } from \"../../../app/models/activity\";\nimport { useStore } from \"../../../app/stores/store\";\n\nconst activityImageStyle = {\n    filter: \"brightness(30%)\",\n};\n\nconst activityImageTextStyle = {\n    position: \"absolute\",\n    bottom: \"5%\",\n    left: \"5%\",\n    width: \"100%\",\n    height: \"auto\",\n    color: \"white\",\n};\n\ninterface Props {\n    Activity: activity;\n}\n\nexport default observer(function ActivityDetailedHeader({ Activity }: Props) {\n    const { activityStore: { updateAttendance, submiting, cancelActivityToggle } } = useStore();\n    return (\n        <Segment.Group>\n            <Segment basic attached=\"top\" style={{ padding: \"0\" }}>\n                {Activity.isCancelled &&\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\n                        ribbon color='red' content='Cancelled' />\n                }\n                <Image\n                    src={`/assets/categoryImages/${Activity.category}.jpg`}\n                    fluid\n                    style={activityImageStyle}\n                />\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size=\"huge\"\n                                    content={Activity.title}\n                                    style={{ color: \"white\" }}\n                                />\n                                <p>{format(Activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by\n                                    <strong>\n                                        <Link to={`/profiles/${Activity.host?.userName}`}>\n                                            {Activity.host?.displayName}\n                                        </Link>\n                                    </strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached=\"bottom\">\n                {\n                    Activity.isHost ? (\n                        <>\n                            <Button\n                                color={Activity.isCancelled ? 'green' : 'red'}\n                                floated='left'\n                                basic\n                                content={Activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                                onClick={cancelActivityToggle}\n                                loading={submiting}\n                            />\n                            <Button\n                                color=\"orange\"\n                                floated=\"right\"\n                                as={Link}\n                                to={`/edit-activity/${Activity.id}`}\n                                disabled={Activity.isCancelled}>\n                                Manage Event\n                            </Button>\n                        </>\n                    ) : Activity.isGoing ? (\n                        <Button loading={submiting} onClick={updateAttendance}>Cancel attendance</Button>\n                    ) : (\n                        <Button\n                            color=\"teal\"\n                            loading={submiting}\n                            onClick={updateAttendance}\n                            disabled={Activity.isCancelled}>\n                            Join Activity\n                        </Button>\n                    )\n                }\n\n\n            </Segment>\n        </Segment.Group>\n    );\n});\n","import { format } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Segment, Grid, Icon } from \"semantic-ui-react\";\nimport { activity } from \"../../../app/models/activity\";\n\ninterface Props {\n    Activity: activity;\n}\n\nexport default observer(function ActivityDetailedInfo({ Activity }: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached=\"top\">\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size=\"large\" color=\"teal\" name=\"info\" />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{Activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign=\"middle\">\n                    <Grid.Column width={1}>\n                        <Icon name=\"calendar\" size=\"large\" color=\"teal\" />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <span>{format(Activity.date!, 'dd MMM yyyy h:mm aa')}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign=\"middle\">\n                    <Grid.Column width={1}>\n                        <Icon name=\"marker\" size=\"large\" color=\"teal\" />\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>\n                            {Activity.venue}, {Activity.city}\n                        </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    );\n});","import { Field, FieldProps, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Segment, Header, Comment, Loader } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport * as yup from \"yup\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        };\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign=\"center\"\n                attached=\"top\"\n                inverted\n                color=\"teal\"\n                style={{ border: \"none\" }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, { resetForm }) =>\n                        commentStore.addComment(values).then(() => resetForm())\n                    }\n                    initialValues={{ body: \"\" }}\n                    validationSchema={yup.object({\n                        body: yup.string().required(),\n                    })}\n                >\n                    {({ isSubmitting, isValid, handleSubmit }) => (\n                        <Form className=\"ui form\">\n                            <Field name=\"body\">\n                                {(props: FieldProps) => (\n                                    <div style={{ position: \"relative\" }}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder=\"Enter your comment (Enter to submit, SHIFT + enter for new line\"\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={(e) => {\n                                                if (e.key === \"Enter\" && e.shiftKey) {\n                                                    return;\n                                                }\n                                                if (e.key === \"Enter\" && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map((comment) => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.userName}`}>\n                                    {comment.displayName}\n                                </Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{ whiteSpace: \"pre-wrap\" }}>\n                                    {comment.body}\n                                </Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n    );\n});\n","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { activity } from '../../../app/models/activity'\n\ninterface Props {\n    Activity: activity\n}\n\nexport default observer(function ActivityDetailedSidebar({ Activity: { attendees, host } }: Props) {\n    if (!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.userName}>\n                            {attendee.userName === host?.userName &&\n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                >\n                                    Host\n                                </Label>}\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${attendee.userName}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                            </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n\n    )\n})","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Grid } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { observer } from \"mobx-react-lite\";\nimport ActivityDetailedHeader from './ActivityDetailedHeader'\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\n\nexport default observer(function ActivityDetails() {\n  const { activityStore } = useStore();\n  const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\n  const { id } = useParams<{ id: string }>();\n\n  useEffect(() => {\n    if (id) {\n      loadActivity(id);\n    }\n\n    return () => clearSelectedActivity();\n  }, [id, loadActivity, clearSelectedActivity]);\n\n  if (loadingInitial || !activity)\n    return <LoadingComponent content=\"Loading Activity\" />;\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <ActivityDetailedHeader Activity={activity} />\n        <ActivityDetailedInfo Activity={activity} />\n        <ActivityDetailedChat activityId={activity.id} />\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <ActivityDetailedSidebar Activity={activity} />\n      </Grid.Column>\n    </Grid>\n  );\n})\n","import React, { useState } from 'react';\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrorPage from './ValidationErrorPage'\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activites/notaguid').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activites', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            { errors && <ValidationErrorPage errors={errors} /> }\n        </>\n    )\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\n\nexport default function NotFoundPage(){\n    return(\n        <Segment placeholder>\n            <Header icon>\n                <Icon name = 'search' />\n                Oops - we've looked everywhere and could not found this!\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to = '/activities' primary content=\"Return To Activity Page\" />\n            </Segment.Inline>\n        </Segment>\n    )\n}","import React from 'react'\nimport { Container, Header, Segment } from 'semantic-ui-react'\nimport {useStore} from '../../app/stores/store'\nexport default function ServerErrorPage(){\n    const{ commonStore } = useStore()\n\n    return(\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as=\"h5\" color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details && (\n                <Segment>\n                    <Header as='h4' content='Stack Trace' color='teal' />\n                    <code style={{marginTop: '10px'}}>{commonStore.error?.details}</code>\n                </Segment>\n            )}\n        </Container>\n    )\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as yup from 'yup'\r\nimport { Button } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../app/common/form/MyTextArea';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const { profileStore: {profile, updateProfile} } = useStore();\r\n\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: profile?.displayName, bio: '' }}\r\n            onSubmit={values =>\r\n                    updateProfile(values)\r\n                    .then(() => setEditMode(false))\r\n            }\r\n            validationSchema={yup.object({\r\n                displayName: yup.string().required()\r\n            })}\r\n        >\r\n            {({ isSubmitting, isValid, dirty }) => (\r\n                <Form className=\"ui form\">\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                    <Button\r\n                        loading={isSubmitting}\r\n                        disabled={!isValid || !dirty}\r\n                        positive\r\n                        content=\"Update profile\"\r\n                        floated='right'\r\n                        type=\"submit\"\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React, { useState } from 'react'\r\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileEditForm from './ProfileEditForm';\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [ editMode, setEditMode ] = useState(false);\r\n\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated=\"left\" icon=\"user\" content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode? 'Cancel': \"Edit Profile\"}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    { editMode? <ProfileEditForm setEditMode={setEditMode} />: <span style={{whiteSpace: 'pre-wrap'}}>{ profile?.bio }</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Grid, Header, Tab, TabProps, Image } from 'semantic-ui-react';\r\nimport { format } from 'date-fns';\r\nimport { UserActivity } from '../../app/models/UserActivity';\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } },\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const \r\n    { profileStore: \r\n        {\r\n            loadUserActivities, profile, loadingActivities, userActivities\r\n        }\r\n    } = useStore();\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.userName);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.userName, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities} >\r\n            <Grid>\r\n                <Grid.Column width={16} >\r\n                    <Header floated='left' icon = 'calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16} >\r\n                    <Tab \r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true}}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4} >\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{minHeight: 100, objectFit: 'cover'}}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>\r\n                                        {activity.title}\r\n                                    </Card.Header>\r\n                                    <Card.Meta textAlign='center' >\r\n                                        <div> { format(new Date(activity.date), 'do LLL') } </div>\r\n                                        <div> { format(new Date(activity.date), 'h:mm a') } </div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content=\r\n                                {activeTab === 3 ? `People following ${profile?.displayName}`\r\n                            :\r\n                                `People ${profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.userName} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: \"100%\" }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview=\".img-preview\"\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    );\r\n}\r\n","import React, { useCallback } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { Header, Icon } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback((acceptedFiles) => {\r\n        // Do something with the files\r\n        setFiles(acceptedFiles.map((file:any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles]);\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n    return (\r\n        <div {...getRootProps()} style ={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Button, Grid, Header } from 'semantic-ui-react'\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean ;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if(cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='step 1 - add Photo' />\r\n                <PhotoWidgetDropzone setFiles = {setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='step 2 - resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='step 3 - preview and upload Photo' />\r\n                {files && files.length > 0 &&\r\n                <>\r\n                    <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                    <Button.Group width={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                    </Button.Group>\r\n                </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const {\r\n        profileStore: {\r\n            isCurrentUser,\r\n            uploadPhoto,\r\n            uploading,\r\n            loading,\r\n            setMainPhoto,\r\n            deletePhoto,\r\n        },\r\n    } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated=\"right\"\r\n                            basic\r\n                            content={addPhotoMode ? \"Cancel\" : \"Add Photo\"}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget\r\n                            uploadPhoto={handlePhotoUpload}\r\n                            loading={uploading}\r\n                        />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map((photo) => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid width={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color=\"green\"\r\n                                                content=\"Main\"\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                loading={target === photo.id && loading}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n    const panes = [\r\n        { menuItem: \"About\", render: () => <ProfileAbout /> },\r\n        { menuItem: \"Photos\", render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: \"Events\", render: () => <ProfileActivities /> },\r\n        {\r\n            menuItem: \"Followers\",\r\n            render: () => <ProfileFollowings />,\r\n        },\r\n        {\r\n            menuItem: \"Following\",\r\n            render: () => <ProfileFollowings />,\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menupostion=\"right\"\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    );\r\n})\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avater='true' size=\"small\" src={profile.image || \"/assets/user.png\"} />\r\n                            <Item.Content verticalalign=\"middle\">\r\n                                <Header as=\"h1\" content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label=\"Followers\" value={profile.followersCount} />\r\n                        <Statistic label=\"Following\" value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n})\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab]);\r\n\r\n    if (loadingProfile) return <LoadingComponent content=\"Loading Profile...\" />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile && <ProfileHeader profile={profile} />}\r\n                <ProfileContent profile={profile!} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n});\r\n","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore()\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport { Container } from \"semantic-ui-react\";\nimport NavBar from \"./NavBar\";\nimport { observer } from \"mobx-react-lite\";\nimport { Route, Switch, useLocation } from \"react-router-dom\";\nimport homePage from \"../../features/home/homePage\";\nimport ActivityForm from \"../../features/activities/form/ActivityForm\";\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\nimport ActivityDetails from \"../../features/activities/Details/ActivityDetails\";\nimport TestErrors from \"../../features/errors/TestError\";\nimport { ToastContainer } from \"react-toastify\";\nimport NotFoundPage from \"../../features/errors/NotFoundPage\";\nimport ServerErrorPage from '../../features/errors/ServerErrorPage';\nimport { useStore } from \"../stores/store\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport ModalContainer from \"../common/modals/ModalContainer\";\nimport ProfilePage from \"../../features/profiles/ProfilePage\";\nimport PrivateRoute from \"./PrivateRoute\";\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if(commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) <LoadingComponent content = 'Loading app...' />\n\n\n  return (\n    <>\n      <ToastContainer position=\"bottom-right\" hideProgressBar />\n      <ModalContainer />\n      <Route exact path={[\"/\", \"/home\"]} component={homePage} />\n      <Route\n        path={\"/(.+)\"}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: \"7em\" }}>\n              <Switch>\n                <PrivateRoute exact path=\"/activities\" component={ActivityDashboard} />\n                <PrivateRoute path=\"/activities/:id\" component={ActivityDetails} />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/createActivity\", \"/edit-activity/:id\"]}\n                  component={ActivityForm}\n                />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path=\"/errors\" component={TestErrors} />\n                <Route path=\"/server-error\" component={ServerErrorPage} />\n                <Route component={NotFoundPage} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./app/layout/styles.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport App from \"./app/layout/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {store, storeContext} from './app/stores/store'\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\n\nexport const history = createBrowserHistory()\n\nReactDOM.render(\n  <storeContext.Provider value={store}>\n    <Router history = {history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </storeContext.Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}